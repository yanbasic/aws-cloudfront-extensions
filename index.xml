<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CloudFront+ workshop on CloudFront+</title><link>https://awslabs.github.io/aws-cloudfront-extensions/</link><description>Recent content in CloudFront+ workshop on CloudFront+</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://awslabs.github.io/aws-cloudfront-extensions/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS CloudShell</title><link>https://awslabs.github.io/aws-cloudfront-extensions/prerequisite/aws-cloudshell/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/prerequisite/aws-cloudshell/readme/</guid><description>AWS CloudShell is a browser-based shell that makes it easy to securely manage, explore, and interact with your AWS resources. CloudShell is pre-authenticated with your console credentials. Common development and operations tools are pre-installed, so no local installation or configuration is required. With CloudShell, you can quickly run scripts with the AWS Command Line Interface (AWS CLI), experiment with AWS service APIs using the AWS SDKs, or use a range of other tools to be productive.</description></item><item><title>Contributing via pull requests</title><link>https://awslabs.github.io/aws-cloudfront-extensions/contribution/pr/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/contribution/pr/readme/</guid><description>Pull Request Checklist You are able to implement a new feature or fix an issue by pull requests, before sending pull requests, make sure you followed this list
Read contributing guidelines Read Code of Conduct Write unit test cases and make sure the unit test is passed It is mandatory to output solution id. Here is an example, you only need to replace the SolutionId Value with yours To send us a pull request by doing the following:</description></item><item><title>Create a CloudFront Distribution</title><link>https://awslabs.github.io/aws-cloudfront-extensions/develop/cloudfront-distribution/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/develop/cloudfront-distribution/readme/</guid><description>Before you create the example Lambda@Edge function, you need to have a CloudFront environment to work with that includes an origin to serve content from. If you already have an environment to use, you can skip this step.
To create a CloudFront distribution with an Amazon S3 origin, you will do the following steps
Create an S3 bucket Sign in to the AWS Management Console and open the Amazon S3 console at https://console.</description></item><item><title>Deploy a Lambda@Edge function to authenticate with Cognito</title><link>https://awslabs.github.io/aws-cloudfront-extensions/deploy/deploy-auth/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/deploy/deploy-auth/readme/</guid><description>In this step, you will find and deploy serverless applications that have been published to the AWS Serverless Application Repository, the application enables authentication with Amazon Cognito for your website.
Deploy resources from CloudFormation Launch workshop stack by clicking this link Use the default parameters to deploy the stack, wait until all the stacked are created Go to CloudFormation console and choose auth-at-edge stack In the Outputs section, it lists all the resources created by the stack, find CloudFrontDistribution, CognitoUserPoolId and DemoUrl in the outputs, we will use them in next steps Deploy auth application in SAR To find and configure an application in the AWS Serverless Application Repository</description></item><item><title>S3 bucket</title><link>https://awslabs.github.io/aws-cloudfront-extensions/cleanup/s3-bucket/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/cleanup/s3-bucket/readme/</guid><description>To clean S3 bucket
Go to the S3 console https://console.aws.amazon.com/s3
Enter cloudfront-extension-workshop in the search bar of Buckets. Then select the radio button to the right of the retrieved bucket. Then press the Empty button at the top. To activate the Empty button of the empty bucket, enter the bucket name and press the Empty button to delete all bucket
When the message that the deletion is complete appears, click Exit on the upper right to complete</description></item><item><title>AWS CDK</title><link>https://awslabs.github.io/aws-cloudfront-extensions/prerequisite/aws-cdk/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/prerequisite/aws-cdk/readme/</guid><description>The AWS Cloud Development Kit (AWS CDK) is an open source software development framework to define your cloud application resources using familiar programming languages.
AWS CDK is not pre-installed in AWS CloudShell currently, so you will need to install it
Install the AWS CDK Toolkit globally using the following Node Package Manager command.
npm install -g aws-cdk You will need to add sudo in front of the command If you see below error</description></item><item><title>CloudFront distribution</title><link>https://awslabs.github.io/aws-cloudfront-extensions/cleanup/cf-distribution/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/cleanup/cf-distribution/readme/</guid><description>To clean CloudFront distribution
Go to the CloudFront console: https://console.aws.amazon.com/cloudfront
Enter cloudfront-extension-workshop in the search bar of CloudFront distributions. Then choose Disable at the top Wait for the status to be Deployed, then choose Delete</description></item><item><title>Deploy a Lambda@Edge function to serve based on devices</title><link>https://awslabs.github.io/aws-cloudfront-extensions/deploy/deploy-device/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/deploy/deploy-device/readme/</guid><description>In this step, you will find and deploy serverless applications that have been published to the AWS Serverless Application Repository, the application serves content based on device type, for example, mobile device will be forwarded to access content for mobile devices, desktop device will be forwarded to access specific content, and so on so forth
Deploy an application in SAR To find and configure an application in the AWS Serverless Application Repository</description></item><item><title>Reporting issues</title><link>https://awslabs.github.io/aws-cloudfront-extensions/contribution/bug-report/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/contribution/bug-report/readme/</guid><description>Issues can be used to keep track of bugs, enhancements, or other requests. Before creating an issue, make sure you have read the contributing guidelines
To create an issue by doing the following
Under your repository, choose Issues tab and choose New issue Choose the issue type Bug (software defects) Feature request General issue (non-software defects such as document issue, process issue) Security vulnerability Fill in each field defined in the template and submit the issue</description></item><item><title>Upload CloudFront+ code into CloudShell</title><link>https://awslabs.github.io/aws-cloudfront-extensions/develop/download-code/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/develop/download-code/readme/</guid><description>To download CloudFront+ code and upload it onto CloudShell
Skip this step if you already have the codes in CloudShell
Go to CloudFront+ code
Choose Download ZIP Upload the zip package onto CloudShell Unzip the package into home folder
unzip aws-cloudfront-extensions-main.zip You can also clone the codes by SSH or Https.
For SSH, you will need to setup the ssh key in your github account by following this doc</description></item><item><title>CloudFormation</title><link>https://awslabs.github.io/aws-cloudfront-extensions/cleanup/cloudformation/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/cleanup/cloudformation/readme/</guid><description>To clean Lambda function and IAM roles
Go to the CloudFormation console https://console.aws.amazon.com/CloudFormation Select Stacks from the left menu, select the radio button to sam-app, and select Delete at the top</description></item><item><title>Understand CloudFront+ code structure</title><link>https://awslabs.github.io/aws-cloudfront-extensions/develop/code-structure/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/develop/code-structure/readme/</guid><description>You will see the following structure after cd aws-cloudfront-extensions-main Here are the explanation for each folder
.github/workflows: the workflow after a PR is created and managed by github actions docs: documents which are used for introducing the project and workshop edge/nodejs: lambda@Edge codes written in nodejs edge/python: lambda@Edge codes written in python scripts: shell scripts used in workflows templates: cdk scripts for deployment such as AWS WAF rules website: resources for holding a workshop In this workshop, you will create a Lambda@Edge function in edge/nodejs folder</description></item><item><title>CloudShell</title><link>https://awslabs.github.io/aws-cloudfront-extensions/cleanup/cloudshell/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/cleanup/cloudshell/readme/</guid><description>To clean CloudShell
Go to the CloudShell console https://console.aws.amazon.com/cloudshell Choose Actions in the top right. Then choose Delete AWS CloudShell home directory</description></item><item><title>Create a Lambda@Edge function</title><link>https://awslabs.github.io/aws-cloudfront-extensions/develop/edge-function/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/develop/edge-function/readme/</guid><description>In this step, you will create a Lambda function by AWS Serverless Application Model(SAM), the function adds code to update response headers in your CloudFront distribution.
Download a sample AWS SAM application After completing UPLOAD CLOUDFRONT+ CODE INTO CLOUDSHELL section, you have uploaded CloudFront+ into CloudShell, go to CloudFront+ folder and perform following commands:
cd edge/nodejs/ sam init Choose 1 - AWS Quick Start Templates
Choose 1 - nodejs12.</description></item><item><title>Test the Lambda@Edge function</title><link>https://awslabs.github.io/aws-cloudfront-extensions/develop/test-function/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/develop/test-function/readme/</guid><description>In this step, you will test the Lambda@Edge function created in the last step
Test Lambda@Edge function To test Lambda@Edge function:
Open AWS Lambda Console in https://console.aws.amazon.com/lambda/home?region=us-east-1#/functions
Choose the function you have created, it would be similar to the following
Choose Code tab of the page, as shown in the following image, you will see the code which has been deployed by AWS Serverless Application Model(SAM)</description></item><item><title>Trigger from CloudFront</title><link>https://awslabs.github.io/aws-cloudfront-extensions/develop/trigger-function/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/develop/trigger-function/readme/</guid><description>Add a CloudFront Trigger to Run the Function Now that you have tested the Lambda function, in this step, you will configure the CloudFront trigger to run your function to add the headers in any response that CloudFront receives from the origin for your distribution.
To configure the CloudFront trigger for your function
Choose Configuration tab and choose Triggers, you will see there is an API Gateway trigger which is deployed by hello world SAM template, delete it since you will not need it in this workshop</description></item><item><title/><link>https://awslabs.github.io/aws-cloudfront-extensions/lambdaedge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/lambdaedge/</guid><description>Lambda@Edge Authentication Name Description Version Release Authentication by Cognito Integrate with Cognito to provide authentication service. v1.0.0 Done Authentication by native library Integrate the native library, in this case using C library and include file, which&amp;rsquo;s acting authentication function. v1.0.0 Todo Adding security header Add security header into reponse after successful authentication, this function will add &amp;lsquo;strict-transport-security&amp;rsquo; to force browser using HTTPS.</description></item><item><title/><link>https://awslabs.github.io/aws-cloudfront-extensions/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://awslabs.github.io/aws-cloudfront-extensions/readme/</guid><description/></item></channel></rss>